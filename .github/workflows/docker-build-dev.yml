# This workflow is used to build and push the Docker image for n8n from dev branch
# - determine-build-context: Determines what needs to be built based on the trigger
# - build-and-push-docker: This builds on both an ARM64 and AMD64 runner so the builds are native to the platform
# - create_multi_arch_manifest: This creates the multi-arch manifest for the Docker image

name: 'Docker: Build and Push (Dev Branch)'

env:
  NODE_OPTIONS: '--max-old-space-size=7168'

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      push_enabled:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: true
      success_url:
        description: 'URL to call after the build is successful'
        required: false
        type: string

  # 当dev分支有新的提交时触发
  push:
    branches:
      - dev
    paths:
      - 'docker/images/n8n/Dockerfile'
      - 'packages/**'
      - 'packages/cli/**'
      - 'packages/core/**'
      - 'packages/nodes-base/**'
      - 'packages/workflow/**'

jobs:
  determine-build-context:
    name: Determine Build Context
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.context.outputs.release_type }}
      n8n_version: ${{ steps.context.outputs.n8n_version }}
      push_enabled: ${{ steps.context.outputs.push_enabled }}
      build_matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Determine build context values
        id: context
        run: |
          # Debug info
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref Name: ${{ github.ref_name }}"

          # Get commit SHA for versioning
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-7)

          # Get current date for nightly builds
          BUILD_DATE=$(date +%Y%m%d)

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual builds from dev branch
            echo "release_type=dev" >> $GITHUB_OUTPUT
            echo "n8n_version=dev-manual-${BUILD_DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "push_enabled=${{ inputs.push_enabled }}" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Automatic builds on dev branch push
            echo "release_type=dev" >> $GITHUB_OUTPUT
            echo "n8n_version=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "push_enabled=true" >> $GITHUB_OUTPUT
          fi

          # Output summary for logs
          echo "=== Build Context Summary ==="
          echo "Release type: $(grep release_type $GITHUB_OUTPUT | cut -d= -f2)"
          echo "N8N version: $(grep n8n_version $GITHUB_OUTPUT | cut -d= -f2)"
          echo "Push enabled: $(grep push_enabled $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Determine build matrix
        id: matrix
        run: |
          RELEASE_TYPE="${{ steps.context.outputs.release_type }}"

          # Dev builds need both platforms for better compatibility
          MATRIX='{
            "platform": ["amd64", "arm64"],
            "include": [{
              "platform": "amd64",
              "runner": "blacksmith-4vcpu-ubuntu-2204",
              "docker_platform": "linux/amd64"
            }, {
              "platform": "arm64",
              "runner": "blacksmith-4vcpu-ubuntu-2204-arm",
              "docker_platform": "linux/arm64"
            }]
          }'

          # Output matrix as single line for GITHUB_OUTPUT
          echo "matrix=$(echo $MATRIX | jq -c .)" >> $GITHUB_OUTPUT
          echo "Build matrix: $(echo $MATRIX | jq .)"

  build-and-push-docker:
    name: Build App, then Build and Push Docker Image (${{ matrix.platform }})
    needs: determine-build-context
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 15
    strategy:
      matrix: ${{ fromJSON(needs.determine-build-context.outputs.build_matrix) }}
    outputs:
      image_ref: ${{ steps.determine-tags.outputs.dockerhub_platform_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: dev
          fetch-depth: 0

      - name: Setup and Build
        uses: n8n-io/n8n/.github/actions/setup-nodejs-blacksmith@f5fbbbe0a28a886451c886cac6b49192a39b0eea # v1.104.1
        with:
          build-command: pnpm build:n8n

      - name: Determine Docker tags
        id: determine-tags
        run: |
          RELEASE_TYPE="${{ needs.determine-build-context.outputs.release_type }}"
          N8N_VERSION_TAG="${{ needs.determine-build-context.outputs.n8n_version }}"
          DOCKER_BASE="${{ secrets.DOCKER_USERNAME }}/n8n"
          PLATFORM="${{ matrix.platform }}"

          DOCKER_TAGS_FOR_PUSH=""

          # Determine tags based on release type
          case "$RELEASE_TYPE" in
            "dev")
              DOCKER_TAGS_FOR_PUSH="${DOCKER_BASE}:dev-${PLATFORM}"
              ;;
            *)
              echo "Error: Unknown release type: $RELEASE_TYPE"
              exit 1
              ;;
          esac

          echo "Generated Tags for push: $DOCKER_TAGS_FOR_PUSH"
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$DOCKER_TAGS_FOR_PUSH" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "dockerhub_platform_tag=${DOCKER_TAGS_FOR_PUSH}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to DockerHub
        if: needs.determine-build-context.outputs.push_enabled == 'true'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: useblacksmith/build-push-action@6fe3b1c3665ca911656e8249f6195103b7dc9782 # v1.2
        with:
          context: .
          file: ./docker/images/n8n/Dockerfile
          build-args: |
            NODE_VERSION=22
            N8N_VERSION=${{ needs.determine-build-context.outputs.n8n_version }}
            N8N_RELEASE_TYPE=${{ needs.determine-build-context.outputs.release_type }}
          platforms: ${{ matrix.docker_platform }}
          provenance: true
          sbom: true
          push: ${{ needs.determine-build-context.outputs.push_enabled == 'true' }}
          tags: ${{ steps.determine-tags.outputs.tags }}

  create_multi_arch_manifest:
    name: Create Multi-Arch Manifest
    needs: [determine-build-context, build-and-push-docker]
    runs-on: ubuntu-latest
    if: |
      needs.build-and-push-docker.result == 'success' &&
      needs.determine-build-context.outputs.push_enabled == 'true'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Determine Docker Hub manifest tag
        id: dockerhub_check
        run: |
          RELEASE_TYPE="${{ needs.determine-build-context.outputs.release_type }}"
          DOCKER_BASE="${{ secrets.DOCKER_USERNAME }}/n8n"

          # Determine if Docker Hub manifest is needed and construct the tag
          case "$RELEASE_TYPE" in
            "dev")
              echo "DOCKER_MANIFEST_TAG=${DOCKER_BASE}:dev" >> $GITHUB_OUTPUT
              echo "CREATE_DOCKERHUB_MANIFEST=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "CREATE_DOCKERHUB_MANIFEST=false" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Login to Docker Hub
        if: steps.dockerhub_check.outputs.CREATE_DOCKERHUB_MANIFEST == 'true'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Docker Hub multi-arch manifest
        if: steps.dockerhub_check.outputs.CREATE_DOCKERHUB_MANIFEST == 'true'
        run: |
          MANIFEST_TAG="${{ steps.dockerhub_check.outputs.DOCKER_MANIFEST_TAG }}"

          echo "Creating Docker Hub manifest: $MANIFEST_TAG"

          docker buildx imagetools create \
            --tag $MANIFEST_TAG \
            ${MANIFEST_TAG}-amd64 \
            ${MANIFEST_TAG}-arm64

  call-success-url:
    name: Call Success URL
    needs: [create_multi_arch_manifest]
    runs-on: ubuntu-latest
    if: needs.create_multi_arch_manifest.result == 'success' || needs.create_multi_arch_manifest.result == 'skipped'
    steps:
      - name: Call Success URL
        env:
          SUCCESS_URL: ${{ github.event.inputs.success_url }}
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.success_url != '' }}
        run: |
          echo "Calling success URL: ${{ env.SUCCESS_URL }}"
          curl -v "${{ env.SUCCESS_URL }}" || echo "Failed to call success URL"
        shell: bash
